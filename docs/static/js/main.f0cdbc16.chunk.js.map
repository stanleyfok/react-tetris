{"version":3,"sources":["tetris-bg.mp3","Tetris/components/Pixel/Pixel.js","Tetris/components/Grid/Grid.js","Tetris/types/Shapes/Shape.js","Tetris/types/Shapes/SquareShape.js","Tetris/types/Shapes/BarShape.js","Tetris/types/Shapes/FlipLShape.js","Tetris/types/Shapes/LShape.js","Tetris/types/Shapes/SShape.js","Tetris/types/Shapes/TShape.js","Tetris/types/Shapes/ZShape.js","Tetris/types/Shapes/ShapeFactory.js","Tetris/types/Grid.js","Tetris/TetrisController.js","Tetris/Tetris.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pixel","props","classNames","isFilled","push","className","join","defaultProps","Grid","grid","rows","cols","map","pixelRows","i","pixelCols","j","key","Shape","this","size","orientations","position","rotation","vector","length","SquareShape","BarShape","FlipLShape","LShape","SShape","TShape","ZShape","SHAPE_TYPES","ShapeFactory","getShape","shape","getRandomShape","Math","floor","random","findRowsToClear","rowsToClear","isRowFull","clearRows","splice","m","col","n","unshift","resetMap","newGrid","copyMap","orientation","getOrientation","x","y","actualX","actualY","TetrisController","view","options","deregisterView","startGame","unclearedGrid","displayGrid","isGameOver","timer","setTimeout","doGameTick","getNextShape","endGame","alert","moveShapeDown","tickInterval","move","hasCollision","addShape","clearFullRows","redraw","moveShapeLeft","moveShapeRight","rotateShape","rotateClockwise","rotateAntiClockwise","clone","setState","Tetris","handleKeyDown","e","keyCode","gameController","state","document","addEventListener","removeEventListener","React","Component","App","src","tetrisBg","type","autoPlay","loop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0cdbc16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris-bg.4ae866dc.mp3\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Pixel.css\";\n\nfunction Pixel(props) {\n  const { isFilled } = props;\n\n  const classNames = [\"pixel\"];\n  if (isFilled) {\n    classNames.push(\"pixel--filled\");\n  }\n\n  return <div className={classNames.join(\" \")}></div>;\n}\n\nPixel.propTypes = {\n  isFilled: PropTypes.bool\n};\n\nPixel.defaultProps = {\n  isFilled: false\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Pixel from \"../Pixel/Pixel\";\n\nimport \"./Grid.css\";\n\nfunction Grid(props) {\n  const { rows, cols, map } = props.grid;\n\n  const pixelRows = [];\n  for (var i = 0; i < rows; i++) {\n    const pixelCols = [];\n\n    for (var j = 0; j < cols; j++) {\n      pixelCols.push(<Pixel key={`${i},${j}`} isFilled={map[i][j]} />);\n    }\n\n    pixelRows.push(<div key={`row-${i}`}>{pixelCols}</div>);\n  }\n\n  return <div className=\"grid\">{pixelRows}</div>;\n}\n\nGrid.propTypes = {\n  grid: PropTypes.object.isRequired\n};\n\nexport default Grid;\n","class Shape {\n  constructor() {\n    this.size = 0;\n    this.orientations = null;\n    this.position = [0, 0];\n    this.rotation = 0;\n  }\n\n  getOrientation() {\n    return this.orientations[this.rotation];\n  }\n\n  move(vector) {\n    this.position[0] += vector[0];\n    this.position[1] += vector[1];\n  }\n\n  rotateClockwise() {\n    this.rotation = (this.rotation + 1) % this.orientations.length;\n  }\n\n  rotateAntiClockwise() {\n    this.rotation =\n      (this.rotation - 1 + this.orientations.length) % this.orientations.length;\n  }\n}\n\nexport default Shape;\n","import Shape from \"./Shape\";\n\nclass SquareShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 2;\n    this.orientations = [\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ];\n  }\n}\n\nexport default SquareShape;\n","import Shape from \"./Shape\";\n\nclass BarShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 4;\n    this.orientations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0]\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default BarShape;\n","import Shape from \"./Shape\";\n\nclass FlipLShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 0, 1],\n        [0, 0, 1],\n        [0, 1, 1]\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [1, 1, 0],\n        [1, 0, 0],\n        [1, 0, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default FlipLShape;\n","import Shape from \"./Shape\";\n\nclass LShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 0, 0],\n        [1, 0, 0],\n        [1, 1, 0]\n      ],\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 1],\n        [0, 0, 1],\n        [0, 0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default LShape;\n","import Shape from \"./Shape\";\n\nclass SShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 1],\n        [1, 1, 0],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 0, 1]\n      ]\n    ];\n  }\n}\n\nexport default SShape;\n","import Shape from \"./Shape\";\n\nclass TShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default TShape;\n","import Shape from \"./Shape\";\n\nclass ZShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 1, 0],\n        [0, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default ZShape;\n","import SquareShape from \"./SquareShape\";\nimport BarShape from \"./BarShape\";\nimport FlipLShape from \"./FlipLShape\";\nimport LShape from \"./LShape\";\nimport SShape from \"./SShape\";\nimport TShape from \"./TShape\";\nimport ZShape from \"./ZShape\";\n\nexport const TOTAL_SHAPES = 7;\n\nexport const SHAPE_TYPES = {\n  SQUARE: 0,\n  T: 1,\n  S: 2,\n  Z: 3,\n  BAR: 4,\n  L: 5,\n  FLIP_L: 6\n};\n\nclass ShapeFactory {\n  static getShape = shape => {\n    switch (shape) {\n      case SHAPE_TYPES.SQUARE:\n        return new SquareShape();\n      case SHAPE_TYPES.T:\n        return new TShape();\n      case SHAPE_TYPES.S:\n        return new SShape();\n      case SHAPE_TYPES.Z:\n        return new ZShape();\n      case SHAPE_TYPES.BAR:\n        return new BarShape();\n      case SHAPE_TYPES.L:\n        return new LShape();\n      case SHAPE_TYPES.FLIP_L:\n        return new FlipLShape();\n      default:\n        return new BarShape();\n    }\n  };\n\n  static getRandomShape = () => {\n    const shape = Math.floor(Math.random() * TOTAL_SHAPES);\n\n    return this.getShape(shape);\n  };\n}\n\nexport default ShapeFactory;\n","class Grid {\n  constructor(rows, cols) {\n    this.rows = rows;\n    this.cols = cols;\n\n    this.resetMap();\n  }\n\n  clone() {\n    const newGrid = new Grid(this.rows, this.cols);\n    newGrid.copyMap(this);\n\n    return newGrid;\n  }\n\n  resetMap() {\n    this.map = [];\n\n    for (var i = 0; i < this.rows; i++) {\n      const col = [];\n\n      for (var j = 0; j < this.cols; j++) {\n        col.push(false);\n      }\n\n      this.map.push(col);\n    }\n  }\n\n  copyMap(grid) {\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.cols; j++) {\n        this.map[i][j] = grid.map[i][j];\n      }\n    }\n  }\n\n  addShape(shape) {\n    const orientation = shape.getOrientation();\n    const size = shape.size;\n    const [x, y] = shape.position;\n\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualX = x + j;\n          const actualY = y + i;\n\n          if (\n            actualX >= 0 &&\n            actualX < this.cols &&\n            actualY >= 0 &&\n            actualY < this.rows\n          ) {\n            this.map[actualY][actualX] = true;\n          }\n        }\n      }\n    }\n  }\n\n  hasCollision(shape) {\n    const orientation = shape.getOrientation();\n    const size = shape.size;\n\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualX = shape.position[0] + j;\n          const actualY = shape.position[1] + i;\n\n          // ignore if still above the top\n          if (actualY < 0) {\n            continue;\n          }\n\n          // check if hitting the bottom wall\n          if (actualY >= this.rows) {\n            return true;\n          }\n\n          // check if hitting the left and right walls\n          if (actualX < 0 || actualX >= this.cols) {\n            return true;\n          }\n\n          // check if hitting an unclear pixel\n          if (this.map[actualY][actualX] === true) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  clearFullRows() {\n    const rowsToClear = this.findRowsToClear();\n    this.clearRows(rowsToClear);\n  }\n\n  findRowsToClear = () => {\n    const rowsToClear = [];\n\n    for (var i = 0; i < this.rows; i++) {\n      var isRowFull = true;\n      for (var j = 0; j < this.cols; j++) {\n        isRowFull &= this.map[i][j];\n      }\n\n      if (isRowFull) {\n        rowsToClear.push(i);\n      }\n    }\n\n    return rowsToClear;\n  };\n\n  clearRows = rowsToClear => {\n    // clear unwanted rows\n    for (var i = rowsToClear.length - 1; i >= 0; i--) {\n      this.map.splice(rowsToClear[i], 1);\n    }\n\n    // append empty rows back\n    for (var m = 0; m < rowsToClear.length; m++) {\n      const col = [];\n\n      for (var n = 0; n < this.cols; n++) {\n        col.push(false);\n      }\n\n      this.map.unshift(col);\n    }\n  };\n}\n\nexport default Grid;\n","import ShapeFactory from \"./types/Shapes/ShapeFactory\";\nimport Grid from \"./types/Grid\";\n\nclass TetrisController {\n  constructor(view, options) {\n    const { rows, cols, tickInterval } = options;\n    this.view = view;\n\n    this.rows = rows;\n    this.cols = cols;\n    this.tickInterval = tickInterval;\n  }\n\n  deregisterView = () => {\n    this.view = null;\n  };\n\n  startGame = () => {\n    // game state\n    this.shape = null;\n    this.unclearedGrid = new Grid(this.rows, this.cols);\n    this.displayGrid = new Grid(this.rows, this.cols);\n    this.isGameOver = false;\n    this.timer = setTimeout(this.doGameTick, 500);\n\n    this.getNextShape();\n  };\n\n  endGame = () => {\n    this.isGameOver = true;\n  };\n\n  doGameTick = () => {\n    if (!this.isGameOver) {\n      this.moveShapeDown();\n\n      // do next tick\n      this.timer = setTimeout(this.doGameTick, this.tickInterval);\n    } else {\n      alert(\"Game Over!\");\n\n      this.startGame();\n    }\n  };\n\n  getNextShape = () => {\n    this.shape = ShapeFactory.getRandomShape();\n    this.shape.rotation = Math.floor(\n      Math.random() * this.shape.orientations.length\n    );\n    this.shape.position = [\n      Math.floor((this.cols - this.shape.size) / 2), // middle of tower\n      -this.shape.size // top of tower\n    ];\n  };\n\n  moveShapeDown = () => {\n    this.shape.move([0, 1]);\n\n    if (this.unclearedGrid.hasCollision(this.shape)) {\n      // move back\n      this.shape.move([0, -1]);\n\n      if (this.shape.position[1] < 0) {\n        this.endGame();\n      } else {\n        this.unclearedGrid.addShape(this.shape);\n\n        this.unclearedGrid.clearFullRows();\n\n        this.getNextShape();\n      }\n    }\n\n    this.redraw();\n  };\n\n  moveShapeLeft = () => {\n    this.shape.move([-1, 0]);\n\n    if (this.unclearedGrid.hasCollision(this.shape)) {\n      // move back\n      this.shape.move([1, 0]);\n    } else {\n      this.redraw();\n    }\n  };\n\n  moveShapeRight = () => {\n    this.shape.move([1, 0]);\n\n    if (this.unclearedGrid.hasCollision(this.shape)) {\n      // move back\n      this.shape.move([-1, 0]);\n    } else {\n      this.redraw();\n    }\n  };\n\n  rotateShape = () => {\n    this.shape.rotateClockwise();\n\n    if (this.unclearedGrid.hasCollision(this.shape)) {\n      // rotate back\n      this.shape.rotateAntiClockwise();\n    } else {\n      this.redraw();\n    }\n  };\n\n  redraw = () => {\n    // update the display grid\n    this.displayGrid = this.unclearedGrid.clone();\n    this.displayGrid.addShape(this.shape);\n\n    // update the view with game state\n    if (this.view) {\n      this.view.setState({\n        displayGrid: this.displayGrid\n      });\n    }\n  };\n}\n\nexport default TetrisController;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"./components/Grid/Grid\";\n\nimport TetrisController from \"./TetrisController\";\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { rows, cols, tickInterval } = props;\n\n    this.gameController = new TetrisController(this, {\n      rows,\n      cols,\n      tickInterval\n    });\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.gameController.startGame();\n\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n\n    this.gameController.deregisterView();\n  }\n\n  handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 32: // SPACE\n      case 38: // UP\n        this.gameController.rotateShape();\n        break;\n      case 37: // LEFT\n        this.gameController.moveShapeLeft();\n        break;\n      case 39: // RIGHT\n        this.gameController.moveShapeRight();\n        break;\n      case 40: // DOWN\n        this.gameController.moveShapeDown();\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { displayGrid } = this.state;\n\n    return <div>{displayGrid && <Grid grid={displayGrid} />}</div>;\n  }\n}\n\nTetris.propTypes = {\n  rows: PropTypes.number.isRequired,\n  cols: PropTypes.number.isRequired,\n  tickInterval: PropTypes.number.isRequired\n};\n\nTetris.defaultProps = {\n  rows: 20,\n  cols: 10,\n  tickInterval: 400\n};\n\nexport default Tetris;\n","import React from \"react\";\nimport Tetris from \"./Tetris/Tetris\";\nimport tetrisBg from \"./tetris-bg.mp3\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <p>\n        Tetris using <strong>OOP</strong> approach\n      </p>\n      <Tetris rows={20} cols={10} tickInterval={400} />\n      <audio src={tetrisBg} type=\"audio/mpeg\" autoPlay={true} loop={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}