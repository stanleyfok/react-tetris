{"version":3,"sources":["tetris-bg.mp3","Tetris/components/Pixel/Pixel.js","Tetris/components/Grid/Grid.js","Tetris/Shapes/Shape.js","Tetris/Shapes/SquareShape.js","Tetris/Shapes/BarShape.js","Tetris/Shapes/FlipLShape.js","Tetris/Shapes/LShape.js","Tetris/Shapes/SShape.js","Tetris/Shapes/TShape.js","Tetris/Shapes/ZShape.js","Tetris/Shapes/ShapeFactory.js","Tetris/TetrisController.js","Tetris/Tetris.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Pixel","props","classNames","isFilled","push","className","join","defaultProps","Grid","rows","cols","pixelMap","pixelRows","i","pixelCols","j","key","Shape","this","size","orientations","SquareShape","BarShape","FlipLShape","LShape","SShape","TShape","ZShape","SHAPE_TYPES","ShapeFactory","getShape","shape","getRandomShape","Math","floor","random","TetrisController","view","options","deregisterView","initGame","shapePosition","shapeRotation","unclearPixelMap","getEmptyPixelMap","isSpeedUp","isGameEnded","timer","startGame","setTimeout","doGameTick","getNextShape","endGame","alert","moveShapeDown","tickInterval","updateView","setState","col","addShapeToUnclearPixelMap","orientation","x","y","actualX","actualY","calculatePixelMap","hasCollision","isGameOver","findRowsToClear","rowsToClear","isRowFull","clearRows","length","splice","m","n","unshift","shapeFactory","newShapePosition","redraw","moveShapeLeft","moveShapeRight","rotateShape","totalOrientations","newShapeRotation","speedUpSpeed","Tetris","handleKeyDown","e","keyCode","gameController","state","document","addEventListener","removeEventListener","React","Component","App","src","tetrisBg","type","autoPlay","loop","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6GAAAA,EAAOC,QAAU,IAA0B,uC,6OCK3C,SAASC,EAAMC,GAAQ,IAGfC,EAAa,CAAC,SAKpB,OAPqBD,EAAbE,UAIND,EAAWE,KAAK,iBAGX,yBAAKC,UAAWH,EAAWI,KAAK,OAOzCN,EAAMO,aAAe,CACnBJ,UAAU,GAGGH,Q,MClBf,SAASQ,EAAKP,GAIZ,IAJoB,IACZQ,EAAyBR,EAAzBQ,KAAMC,EAAmBT,EAAnBS,KAAMC,EAAaV,EAAbU,SAEdC,EAAY,GACTC,EAAI,EAAGA,EAAIJ,EAAMI,IAAK,CAG7B,IAFA,IAAMC,EAAY,GAETC,EAAI,EAAGA,EAAIL,EAAMK,IACxBD,EAAUV,KAAK,kBAAC,EAAD,CAAOY,IAAG,UAAKH,EAAL,YAAUE,GAAKZ,SAAUQ,EAASE,GAAGE,MAGhEH,EAAUR,KAAK,yBAAKY,IAAG,cAASH,IAAMC,IAGxC,OAAO,yBAAKT,UAAU,QAAQO,GAShCJ,EAAKD,aAAe,CAClBE,KAAM,GACNC,KAAM,IAGOF,Q,OC3BAS,EANb,aAAe,oBACbC,KAAKC,KAAO,EACZD,KAAKE,aAAe,MCaTC,E,YAbb,WAAYpB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,GACJ,CAAC,EAAG,KAPS,E,2BADKH,GCsBXK,E,YArBb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAEZ,CACE,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,KAfG,E,2BADEH,GC8BRM,E,YA7Bb,WAAYtB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvBM,E,2BADIH,GC8BVO,E,YA7Bb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvBM,E,2BADAH,GCoBNQ,E,YAnBb,WAAYxB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAbM,E,2BADAH,GC8BNS,E,YA7Bb,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAvBM,E,2BADAH,GCoBNU,E,YAnBb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,KAAO,EACZ,EAAKC,aAAe,CAClB,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAET,CACE,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,KAbM,E,2BADAH,GCQRW,EACH,EADGA,EAER,EAFQA,EAGR,EAHQA,EAIR,EAJQA,EAKN,EALMA,EAMR,EANQA,EAOH,EAgCKC,E,iDA5BbC,SAAW,SAAAC,GACT,OAAQA,GACN,KAAKH,EACH,OAAO,IAAIP,EACb,KAAKO,EACH,OAAO,IAAIF,EACb,KAAKE,EACH,OAAO,IAAIH,EACb,KAAKG,EACH,OAAO,IAAID,EACb,KAAKC,EACH,OAAO,IAAIN,EACb,KAAKM,EACH,OAAO,IAAIJ,EACb,KAAKI,EACH,OAAO,IAAIL,EACb,QACE,OAAO,IAAID,I,KAIjBU,eAAiB,WACf,IAAMD,EAAQE,KAAKC,MAnCK,EAmCCD,KAAKE,UAE9B,OAAO,EAAKL,SAASC,KCmQVK,EA7Sb,WAAYC,EAAMC,GAAU,IAAD,gCAW3BC,eAAiB,WACf,EAAKF,KAAO,MAZa,KAe3BG,SAAW,WAET,EAAKT,MAAQ,KACb,EAAKU,cAAgB,CAAC,EAAG,GACzB,EAAKC,cAAgB,EACrB,EAAKC,gBAAkB,EAAKC,mBAC5B,EAAKC,WAAY,EACjB,EAAKC,aAAc,EACnB,EAAKC,MAAQ,MAvBY,KA0B3BC,UAAY,WACV,EAAKD,MAAQE,WAAW,EAAKC,WAAY,KAEzC,EAAKC,gBA7BoB,KAgC3BC,QAAU,WACR,EAAKN,aAAc,EAEnBO,MAAM,eAnCmB,KAsC3BH,WAAa,WACN,EAAKJ,aAOR,EAAKN,WACL,EAAKQ,cANL,EAAKM,gBAGL,EAAKP,MAAQE,WAAW,EAAKC,WAAY,EAAKK,gBA5CvB,KAmD3BC,WAAa,SAAA7C,GACP,EAAK0B,MACP,EAAKA,KAAKoB,SAAS,CACjB9C,cAtDqB,KA2D3BiC,iBAAmB,WAGjB,IAFA,IAAMjC,EAAW,GAERE,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAAK,CAGlC,IAFA,IAAM6C,EAAM,GAEH3C,EAAI,EAAGA,EAAI,EAAKL,KAAMK,IAC7B2C,EAAItD,MAAK,GAGXO,EAASP,KAAKsD,GAGhB,OAAO/C,GAxEkB,KA2E3BgD,0BAA4B,WAK1B,IAJA,IAAMC,EAAc,EAAK7B,MAAMX,aAAa,EAAKsB,eAC3CvB,EAAO,EAAKY,MAAMZ,KAFQ,cAGjB,EAAKsB,cAHY,GAGzBoB,EAHyB,KAGtBC,EAHsB,KAKvBjD,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAII,EAAMJ,IAExB,GAA0B,IAAtB6C,EAAY/C,GAAGE,GAAU,CAC3B,IAAMgD,EAAUF,EAAI9C,EACdiD,EAAUF,EAAIjD,EAGlBkD,GAAW,GACXA,EAAU,EAAKrD,MACfsD,GAAW,GACXA,EAAU,EAAKvD,OAEf,EAAKkC,gBAAgBqB,GAASD,IAAW,KA7FxB,KAoG3BE,kBAAoB,WAMlB,IALA,IAAMtD,EAAW,EAAKiC,mBAChBgB,EAAc,EAAK7B,MAAMX,aAAa,EAAKsB,eAC3CvB,EAAO,EAAKY,MAAMZ,KAHA,cAIT,EAAKsB,cAJI,GAIjBoB,EAJiB,KAIdC,EAJc,KAMfjD,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAC7B,IAAK,IAAIE,EAAI,EAAGA,EAAI,EAAKL,KAAMK,IAC7BJ,EAASE,GAAGE,GAAK,EAAK4B,gBAAgB9B,GAAGE,GAI7C,IAAKF,EAAI,EAAGA,EAAIM,EAAMN,IACpB,IAAKE,EAAI,EAAGA,EAAII,EAAMJ,IAEpB,GAA0B,IAAtB6C,EAAY/C,GAAGE,GAAU,CAC3B,IAAMgD,EAAUF,EAAI9C,EACdiD,EAAUF,EAAIjD,EAGlBkD,GAAW,GACXA,EAAU,EAAKrD,MACfsD,GAAW,GACXA,EAAU,EAAKvD,OAEfE,EAASqD,GAASD,IAAW,GAMrC,OAAOpD,GAnIkB,KAsI3BuD,aAAe,SAACzB,EAAeC,GAK7B,IAJA,IAAMkB,EAAc,EAAK7B,MAAMX,aAAasB,GACtCvB,EAAO,EAAKY,MAAMZ,KAFuB,cAGhCsB,EAHgC,GAGxCoB,EAHwC,KAGrCC,EAHqC,KAKtCjD,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAII,EAAMJ,IAExB,GAA0B,IAAtB6C,EAAY/C,GAAGE,GAAU,CAC3B,IAAMgD,EAAUF,EAAI9C,EACdiD,EAAUF,EAAIjD,EAGpB,GAAImD,EAAU,EACZ,SAIF,GAAIA,GAAW,EAAKvD,KAClB,OAAO,EAIT,GAAIsD,EAAU,GAAKA,GAAW,EAAKrD,KACjC,OAAO,EAIT,IAA+C,IAA3C,EAAKiC,gBAAgBqB,GAASD,GAChC,OAAO,EAMf,OAAO,GAzKkB,KA4K3BI,WAAa,WAKX,IAJA,IAAMP,EAAc,EAAK7B,MAAMX,aAAa,EAAKsB,eAC3CvB,EAAO,EAAKY,MAAMZ,KAClB2C,EAAI,EAAKrB,cAAc,GAEpB5B,EAAI,EAAGA,EAAIM,EAAMN,IACxB,IAAK,IAAIE,EAAI,EAAGA,EAAII,EAAMJ,IAAK,CAE7B,GAA0B,IAAtB6C,EAAY/C,GAAGE,GAIjB,GAHgB+C,EAAIjD,EAGN,EACZ,OAAO,EAMf,OAAO,GA/LkB,KAkM3BuD,gBAAkB,WAGhB,IAFA,IAAMC,EAAc,GAEXxD,EAAI,EAAGA,EAAI,EAAKJ,KAAMI,IAAK,CAElC,IADA,IAAIyD,GAAY,EACPvD,EAAI,EAAGA,EAAI,EAAKL,KAAMK,IAC7BuD,GAAa,EAAK3B,gBAAgB9B,GAAGE,GAGnCuD,GACFD,EAAYjE,KAAKS,GAIrB,OAAOwD,GAhNkB,KAmN3BE,UAAY,SAAAF,GAEV,IAAK,IAAIxD,EAAIwD,EAAYG,OAAS,EAAG3D,GAAK,EAAGA,IAC3C,EAAK8B,gBAAgB8B,OAAOJ,EAAYxD,GAAI,GAI9C,IAAK,IAAI6D,EAAI,EAAGA,EAAIL,EAAYG,OAAQE,IAAK,CAG3C,IAFA,IAAMhB,EAAM,GAEHiB,EAAI,EAAGA,EAAI,EAAKjE,KAAMiE,IAC7BjB,EAAItD,MAAK,GAGX,EAAKuC,gBAAgBiC,QAAQlB,KAjON,KAqO3BP,aAAe,WACb,EAAKpB,MAAQ,EAAK8C,aAAa7C,iBAC/B,EAAKU,cAAgBT,KAAKC,MACxBD,KAAKE,SAAW,EAAKJ,MAAMX,aAAaoD,QAE1C,EAAK/B,cAAgB,CACnBR,KAAKC,OAAO,EAAKxB,KAAO,EAAKqB,MAAMZ,MAAQ,IAC1C,EAAKY,MAAMZ,OA5OW,KAgP3BmC,cAAgB,WACd,IAAMwB,EAAmB,CAAC,EAAKrC,cAAc,GAAI,EAAKA,cAAc,GAAK,GAEzE,GAAK,EAAKyB,aAAaY,EAAkB,EAAKpC,eAG5C,GAAI,EAAKyB,aACP,EAAKf,cACA,CACL,EAAKO,4BAEL,IAAMU,EAAc,EAAKD,kBACzB,EAAKG,UAAUF,GAEf,EAAKlB,oBAVP,EAAKV,cAAL,UAAyBqC,GAc3B,EAAKC,UAlQoB,KAqQ3BC,cAAgB,WACd,IAAMF,EAAmB,CAAC,EAAKrC,cAAc,GAAK,EAAG,EAAKA,cAAc,IAEnE,EAAKyB,aAAaY,EAAkB,EAAKpC,iBAC5C,EAAKD,cAAL,UAAyBqC,GAEzB,EAAKC,WA3QkB,KA+Q3BE,eAAiB,WACf,IAAMH,EAAmB,CAAC,EAAKrC,cAAc,GAAK,EAAG,EAAKA,cAAc,IAEnE,EAAKyB,aAAaY,EAAkB,EAAKpC,iBAC5C,EAAKD,cAAL,UAAyBqC,GAEzB,EAAKC,WArRkB,KAyR3BG,YAAc,WACZ,IAAMC,EAAoB,EAAKpD,MAAMX,aAAaoD,OAC5CY,GAAoB,EAAK1C,cAAgB,GAAKyC,EAE/C,EAAKjB,aAAa,EAAKzB,cAAe2C,KACzC,EAAK1C,cAAgB0C,EAErB,EAAKL,WAhSkB,KAoS3BA,OAAS,WAEP,IAAMpE,EAAW,EAAKsD,oBAGtB,EAAKT,WAAW7C,IAzSS,IACjBF,EAA2C6B,EAA3C7B,KAAMC,EAAqC4B,EAArC5B,KAAM6C,EAA+BjB,EAA/BiB,aAAc8B,EAAiB/C,EAAjB+C,aAClCnE,KAAKmB,KAAOA,EAEZnB,KAAK2D,aAAe,IAAIhD,EACxBX,KAAKT,KAAOA,EACZS,KAAKR,KAAOA,EACZQ,KAAKqC,aAAeA,EACpBrC,KAAKmE,aAAeA,GCLlBC,E,YACJ,WAAYrF,GAAQ,IAAD,uBACjB,4CAAMA,KA0BRsF,cAAgB,SAAAC,GACd,OAAQA,EAAEC,SACR,KAAK,GACL,KAAK,GACH,EAAKC,eAAeR,cACpB,MACF,KAAK,GACH,EAAKQ,eAAeV,gBACpB,MACF,KAAK,GACH,EAAKU,eAAeT,iBACpB,MACF,KAAK,GACH,EAAKS,eAAepC,kBAxCP,IAGT7C,EAA6BR,EAA7BQ,KAAMC,EAAuBT,EAAvBS,KAAM6C,EAAiBtD,EAAjBsD,aAHH,OAKjB,EAAKmC,eAAiB,IAAItD,EAAJ,eAA2B,CAC/C3B,OACAC,OACA6C,iBAEF,EAAKmC,eAAelD,WAEpB,EAAKmD,MAAQ,GAZI,E,iFAgBjBzE,KAAKwE,eAAe1C,YAEpB4C,SAASC,iBAAiB,UAAW3E,KAAKqE,iB,6CAI1CK,SAASE,oBAAoB,UAAW5E,KAAKqE,eAE7CrE,KAAKwE,eAAenD,mB,+BAuBZ,IACA5B,EAAaO,KAAKyE,MAAlBhF,SAER,OAAO,6BAAMA,GAAY,kBAAC,EAAD,CAAMA,SAAUA,S,GAnDxBoF,IAAMC,WA6D3BV,EAAO/E,aAAe,CACpBE,KAAM,GACNC,KAAM,GACN6C,aAAc,KAGD+B,Q,uBC3DAW,MATf,WACE,OACE,yBAAK5F,UAAU,OACb,kBAAC,EAAD,CAAQI,KAAM,GAAIC,KAAM,GAAI6C,aAAc,MAC1C,2BAAO2C,IAAKC,IAAUC,KAAK,aAAaC,UAAU,EAAMC,MAAM,MCGhDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5da2836a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris-bg.4ae866dc.mp3\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Pixel.css\";\n\nfunction Pixel(props) {\n  const { isFilled } = props;\n\n  const classNames = [\"pixel\"];\n  if (isFilled) {\n    classNames.push(\"pixel--filled\");\n  }\n\n  return <div className={classNames.join(\" \")}></div>;\n}\n\nPixel.propTypes = {\n  isFilled: PropTypes.bool\n};\n\nPixel.defaultProps = {\n  isFilled: false\n};\n\nexport default Pixel;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Pixel from \"../Pixel/Pixel\";\n\nimport \"./Grid.css\";\n\nfunction Grid(props) {\n  const { rows, cols, pixelMap } = props;\n\n  const pixelRows = [];\n  for (var i = 0; i < rows; i++) {\n    const pixelCols = [];\n\n    for (var j = 0; j < cols; j++) {\n      pixelCols.push(<Pixel key={`${i},${j}`} isFilled={pixelMap[i][j]} />);\n    }\n\n    pixelRows.push(<div key={`row-${i}`}>{pixelCols}</div>);\n  }\n\n  return <div className=\"grid\">{pixelRows}</div>;\n}\n\nGrid.propTypes = {\n  rows: PropTypes.number,\n  cols: PropTypes.number,\n  pixelMap: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.bool)).isRequired\n};\n\nGrid.defaultProps = {\n  rows: 20,\n  cols: 10\n};\n\nexport default Grid;\n","class Shape {\n  constructor() {\n    this.size = 0;\n    this.orientations = null;\n  }\n}\n\nexport default Shape;\n","import Shape from \"./Shape\";\n\nclass SquareShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 2;\n    this.orientations = [\n      [\n        [1, 1],\n        [1, 1]\n      ]\n    ];\n  }\n}\n\nexport default SquareShape;\n","import Shape from \"./Shape\";\n\nclass BarShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 4;\n    this.orientations = [\n      [\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0],\n        [0, 1, 0, 0]\n      ],\n      [\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default BarShape;\n","import Shape from \"./Shape\";\n\nclass FlipLShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 0, 1],\n        [0, 0, 1],\n        [0, 1, 1]\n      ],\n      [\n        [1, 0, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [1, 1, 0],\n        [1, 0, 0],\n        [1, 0, 0]\n      ],\n      [\n        [1, 1, 1],\n        [0, 0, 1],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default FlipLShape;\n","import Shape from \"./Shape\";\n\nclass LShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 0, 0],\n        [1, 0, 0],\n        [1, 1, 0]\n      ],\n      [\n        [0, 0, 1],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 1],\n        [0, 0, 1],\n        [0, 0, 1]\n      ],\n      [\n        [1, 1, 1],\n        [1, 0, 0],\n        [0, 0, 0]\n      ]\n    ];\n  }\n}\n\nexport default LShape;\n","import Shape from \"./Shape\";\n\nclass SShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 1],\n        [1, 1, 0],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 0, 1]\n      ]\n    ];\n  }\n}\n\nexport default SShape;\n","import Shape from \"./Shape\";\n\nclass TShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [0, 1, 0],\n        [1, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 1, 0],\n        [0, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 0, 0],\n        [1, 1, 1],\n        [0, 1, 0]\n      ],\n      [\n        [0, 1, 0],\n        [1, 1, 0],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default TShape;\n","import Shape from \"./Shape\";\n\nclass ZShape extends Shape {\n  constructor(props) {\n    super(props);\n\n    this.size = 3;\n    this.orientations = [\n      [\n        [1, 1, 0],\n        [0, 1, 1],\n        [0, 0, 0]\n      ],\n      [\n        [0, 0, 1],\n        [0, 1, 1],\n        [0, 1, 0]\n      ]\n    ];\n  }\n}\n\nexport default ZShape;\n","import SquareShape from \"./SquareShape\";\nimport BarShape from \"./BarShape\";\nimport FlipLShape from \"./FlipLShape\";\nimport LShape from \"./LShape\";\nimport SShape from \"./SShape\";\nimport TShape from \"./TShape\";\nimport ZShape from \"./ZShape\";\n\nexport const TOTAL_SHAPES = 7;\n\nexport const SHAPE_TYPES = {\n  SQUARE: 0,\n  T: 1,\n  S: 2,\n  Z: 3,\n  BAR: 4,\n  L: 5,\n  FLIP_L: 6\n};\n\nclass ShapeFactory {\n  getShape = shape => {\n    switch (shape) {\n      case SHAPE_TYPES.SQUARE:\n        return new SquareShape();\n      case SHAPE_TYPES.T:\n        return new TShape();\n      case SHAPE_TYPES.S:\n        return new SShape();\n      case SHAPE_TYPES.Z:\n        return new ZShape();\n      case SHAPE_TYPES.BAR:\n        return new BarShape();\n      case SHAPE_TYPES.L:\n        return new LShape();\n      case SHAPE_TYPES.FLIP_L:\n        return new FlipLShape();\n      default:\n        return new BarShape();\n    }\n  };\n\n  getRandomShape = () => {\n    const shape = Math.floor(Math.random() * TOTAL_SHAPES);\n\n    return this.getShape(shape);\n  };\n}\n\nexport default ShapeFactory;\n","import ShapeFactory from \"./Shapes/ShapeFactory\";\n\nclass TetrisController {\n  constructor(view, options) {\n    const { rows, cols, tickInterval, speedUpSpeed } = options;\n    this.view = view;\n\n    this.shapeFactory = new ShapeFactory();\n    this.rows = rows;\n    this.cols = cols;\n    this.tickInterval = tickInterval;\n    this.speedUpSpeed = speedUpSpeed;\n  }\n\n  deregisterView = () => {\n    this.view = null;\n  };\n\n  initGame = () => {\n    // game state\n    this.shape = null;\n    this.shapePosition = [0, 0];\n    this.shapeRotation = 0;\n    this.unclearPixelMap = this.getEmptyPixelMap();\n    this.isSpeedUp = false;\n    this.isGameEnded = false;\n    this.timer = null;\n  };\n\n  startGame = () => {\n    this.timer = setTimeout(this.doGameTick, 500);\n\n    this.getNextShape();\n  };\n\n  endGame = () => {\n    this.isGameEnded = true;\n\n    alert(\"Game Over!\");\n  };\n\n  doGameTick = () => {\n    if (!this.isGameEnded) {\n      // move the block down 1 pixel\n      this.moveShapeDown();\n\n      // do next tick\n      this.timer = setTimeout(this.doGameTick, this.tickInterval);\n    } else {\n      this.initGame();\n      this.startGame();\n    }\n  };\n\n  updateView = pixelMap => {\n    if (this.view) {\n      this.view.setState({\n        pixelMap\n      });\n    }\n  };\n\n  getEmptyPixelMap = () => {\n    const pixelMap = [];\n\n    for (var i = 0; i < this.rows; i++) {\n      const col = [];\n\n      for (var j = 0; j < this.cols; j++) {\n        col.push(false);\n      }\n\n      pixelMap.push(col);\n    }\n\n    return pixelMap;\n  };\n\n  addShapeToUnclearPixelMap = () => {\n    const orientation = this.shape.orientations[this.shapeRotation];\n    const size = this.shape.size;\n    const [x, y] = this.shapePosition;\n\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualX = x + j;\n          const actualY = y + i;\n\n          if (\n            actualX >= 0 &&\n            actualX < this.cols &&\n            actualY >= 0 &&\n            actualY < this.rows\n          ) {\n            this.unclearPixelMap[actualY][actualX] = true;\n          }\n        }\n      }\n    }\n  };\n\n  calculatePixelMap = () => {\n    const pixelMap = this.getEmptyPixelMap();\n    const orientation = this.shape.orientations[this.shapeRotation];\n    const size = this.shape.size;\n    const [x, y] = this.shapePosition;\n\n    for (var i = 0; i < this.rows; i++) {\n      for (var j = 0; j < this.cols; j++) {\n        pixelMap[i][j] = this.unclearPixelMap[i][j];\n      }\n    }\n\n    for (i = 0; i < size; i++) {\n      for (j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualX = x + j;\n          const actualY = y + i;\n\n          if (\n            actualX >= 0 &&\n            actualX < this.cols &&\n            actualY >= 0 &&\n            actualY < this.rows\n          ) {\n            pixelMap[actualY][actualX] = true;\n          }\n        }\n      }\n    }\n\n    return pixelMap;\n  };\n\n  hasCollision = (shapePosition, shapeRotation) => {\n    const orientation = this.shape.orientations[shapeRotation];\n    const size = this.shape.size;\n    const [x, y] = shapePosition;\n\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualX = x + j;\n          const actualY = y + i;\n\n          // ignore if still above the top\n          if (actualY < 0) {\n            continue;\n          }\n\n          // check if hitting the bottom wall\n          if (actualY >= this.rows) {\n            return true;\n          }\n\n          // check if hitting the left and right walls\n          if (actualX < 0 || actualX >= this.cols) {\n            return true;\n          }\n\n          // check if hitting an unclear pixel\n          if (this.unclearPixelMap[actualY][actualX] === true) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  isGameOver = () => {\n    const orientation = this.shape.orientations[this.shapeRotation];\n    const size = this.shape.size;\n    const y = this.shapePosition[1];\n\n    for (var i = 0; i < size; i++) {\n      for (var j = 0; j < size; j++) {\n        // only check if the pixel on the shape is filled\n        if (orientation[i][j] === 1) {\n          const actualY = y + i;\n\n          // ignore if still above the top\n          if (actualY < 0) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n\n  findRowsToClear = () => {\n    const rowsToClear = [];\n\n    for (var i = 0; i < this.rows; i++) {\n      var isRowFull = true;\n      for (var j = 0; j < this.cols; j++) {\n        isRowFull &= this.unclearPixelMap[i][j];\n      }\n\n      if (isRowFull) {\n        rowsToClear.push(i);\n      }\n    }\n\n    return rowsToClear;\n  };\n\n  clearRows = rowsToClear => {\n    // clear unwanted rows\n    for (var i = rowsToClear.length - 1; i >= 0; i--) {\n      this.unclearPixelMap.splice(rowsToClear[i], 1);\n    }\n\n    // append empty rows back\n    for (var m = 0; m < rowsToClear.length; m++) {\n      const col = [];\n\n      for (var n = 0; n < this.cols; n++) {\n        col.push(false);\n      }\n\n      this.unclearPixelMap.unshift(col);\n    }\n  };\n\n  getNextShape = () => {\n    this.shape = this.shapeFactory.getRandomShape();\n    this.shapeRotation = Math.floor(\n      Math.random() * this.shape.orientations.length\n    );\n    this.shapePosition = [\n      Math.floor((this.cols - this.shape.size) / 2), // middle of tower\n      -this.shape.size // top of tower\n    ];\n  };\n\n  moveShapeDown = () => {\n    const newShapePosition = [this.shapePosition[0], this.shapePosition[1] + 1];\n\n    if (!this.hasCollision(newShapePosition, this.shapeRotation)) {\n      this.shapePosition = [...newShapePosition];\n    } else {\n      if (this.isGameOver()) {\n        this.endGame();\n      } else {\n        this.addShapeToUnclearPixelMap();\n\n        const rowsToClear = this.findRowsToClear();\n        this.clearRows(rowsToClear);\n\n        this.getNextShape();\n      }\n    }\n\n    this.redraw();\n  };\n\n  moveShapeLeft = () => {\n    const newShapePosition = [this.shapePosition[0] - 1, this.shapePosition[1]];\n\n    if (!this.hasCollision(newShapePosition, this.shapeRotation)) {\n      this.shapePosition = [...newShapePosition];\n\n      this.redraw();\n    }\n  };\n\n  moveShapeRight = () => {\n    const newShapePosition = [this.shapePosition[0] + 1, this.shapePosition[1]];\n\n    if (!this.hasCollision(newShapePosition, this.shapeRotation)) {\n      this.shapePosition = [...newShapePosition];\n\n      this.redraw();\n    }\n  };\n\n  rotateShape = () => {\n    const totalOrientations = this.shape.orientations.length;\n    const newShapeRotation = (this.shapeRotation + 1) % totalOrientations;\n\n    if (!this.hasCollision(this.shapePosition, newShapeRotation)) {\n      this.shapeRotation = newShapeRotation;\n\n      this.redraw();\n    }\n  };\n\n  redraw = () => {\n    // update the pixelMap\n    const pixelMap = this.calculatePixelMap();\n\n    // update the view with game state\n    this.updateView(pixelMap);\n  };\n}\n\nexport default TetrisController;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"./components/Grid/Grid\";\n\nimport TetrisController from \"./TetrisController\";\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const { rows, cols, tickInterval } = props;\n\n    this.gameController = new TetrisController(this, {\n      rows,\n      cols,\n      tickInterval\n    });\n    this.gameController.initGame();\n\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.gameController.startGame();\n\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\n\n    this.gameController.deregisterView();\n  }\n\n  handleKeyDown = e => {\n    switch (e.keyCode) {\n      case 32: // SPACE\n      case 38: // UP\n        this.gameController.rotateShape();\n        break;\n      case 37: // LEFT\n        this.gameController.moveShapeLeft();\n        break;\n      case 39: // RIGHT\n        this.gameController.moveShapeRight();\n        break;\n      case 40: // DOWN\n        this.gameController.moveShapeDown();\n        break;\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const { pixelMap } = this.state;\n\n    return <div>{pixelMap && <Grid pixelMap={pixelMap} />}</div>;\n  }\n}\n\nTetris.propTypes = {\n  rows: PropTypes.number.isRequired,\n  cols: PropTypes.number.isRequired,\n  tickInterval: PropTypes.number.isRequired\n};\n\nTetris.defaultProps = {\n  rows: 20,\n  cols: 10,\n  tickInterval: 400\n};\n\nexport default Tetris;\n","import React from \"react\";\nimport Tetris from \"./Tetris/Tetris\";\nimport tetrisBg from \"./tetris-bg.mp3\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Tetris rows={20} cols={10} tickInterval={400} />\n      <audio src={tetrisBg} type=\"audio/mpeg\" autoPlay={true} loop={true} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}